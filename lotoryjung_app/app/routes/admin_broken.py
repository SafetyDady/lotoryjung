from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, TextAreaField, SubmitField, BooleanField
from wtforms.validators import DataRequired, Length
f@admin_bp.route('/blocked_numbers/<int:id>/delete', methods=['POST'])
@login_required
@admin_required
def delete_blocked_number(id):
    """Delete blocked number"""
    blocked_number = BlockedNumber.query.get_or_404(id)
    
    try:
        db.session.delete(blocked_number)
        db.session.commit()
        flash(f'‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô {blocked_number.number_norm} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
    except Exception as e:
        db.session.rollback()
        flash('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error')
    
    return redirect(url_for('admin.blocked_numbers'))


@admin_bp.route('/blocked_numbers/clear_all', methods=['POST'])
@login_required
@admin_required
def clear_all_blocked_numbers():
    """Clear all blocked numbers"""
    try:
        # Count before delete
        total_count = BlockedNumber.query.count()
        
        if total_count == 0:
            flash('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏ö', 'info')
            return redirect(url_for('admin.blocked_numbers'))
        
        # Delete all records
        deleted_count = BlockedNumber.query.delete()
        db.session.commit()
        
        flash(f'üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏•‡∏ö {deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', 'success')
        flash('‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß', 'info')
        
    except Exception as e:
        db.session.rollback()
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}', 'error')
    
    return redirect(url_for('admin.blocked_numbers'))


def admin_required(f):
    generate_blocked_numbers_for_field, 
    validate_bulk_numbers, 
    preview_bulk_blocked_numbers
)
from app import db

admin_bp = Blueprint('admin', __name__)

# Forms
class BlockedNumberForm(FlaskForm):
    field = SelectField('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 
                       choices=[
                           ('2_top', '2 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô'),
                           ('2_bottom', '2 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á'),
                           ('3_top', '3 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô'),
                           ('tote', '‡πÇ‡∏ï‡πä‡∏î')
                       ],
                       validators=[DataRequired()])
    number_norm = StringField('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç', validators=[DataRequired(), Length(min=2, max=3)])
    reason = TextAreaField('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•', validators=[Length(max=255)])
    is_active = BooleanField('‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', default=True)
    submit = SubmitField('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')

class BulkBlockedNumberForm(FlaskForm):
    reason = TextAreaField('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', validators=[Length(max=255)])
    is_active = BooleanField('‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', default=True)
    submit = SubmitField('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')

def admin_required(f):
    """Decorator to require admin access"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_admin():
            flash('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ', 'error')
            return redirect(url_for('main.index'))
        return f(*args, **kwargs)
    return decorated_function

def validate_bulk_numbers_new_format(numbers_data):
    """Validate bulk numbers data in new format (2_digit/3_digit type)"""
    errors = []
    valid_numbers = []
    
    if not isinstance(numbers_data, list):
        return {'valid': False, 'errors': ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö'], 'valid_numbers': []}
    
    for i, item in enumerate(numbers_data):
        if not isinstance(item, dict):
            errors.append(f'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö')
            continue
            
        number = item.get('number', '').strip()
        number_type = item.get('type', '').strip()
        
        # Validate number
        if not number:
            errors.append(f'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1}: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç')
            continue
            
        if not number.isdigit():
            errors.append(f'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1}: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
            continue
        
        # Validate number type and length
        if number_type == '2_digit':
            if len(number) > 2:
                errors.append(f'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1}: ‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ï‡∏±‡∏ß')
                continue
        elif number_type == '3_digit':
            if len(number) > 3:
                errors.append(f'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1}: ‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ï‡∏±‡∏ß')
                continue
        else:
            errors.append(f'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1}: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
            continue
        
        # Auto-detect type if not specified correctly
        if len(number) <= 2:
            number_type = '2_digit'
        else:
            number_type = '3_digit'
        
        valid_numbers.append({
            'number': number,
            'type': number_type,
            'original_index': i
        })
    
    return {
        'valid': len(errors) == 0,
        'errors': errors,
        'valid_numbers': valid_numbers
    }

@admin_bp.route('/dashboard')
@login_required
@admin_required
def dashboard():
    """Admin dashboard"""
    return render_template('admin/dashboard.html')

@admin_bp.route('/blocked_numbers')
@login_required  
@admin_required
def blocked_numbers():
    """Blocked numbers list"""
    page = request.args.get('page', 1, type=int)
    field_filter = request.args.get('field', '')
    search = request.args.get('search', '')
    
    query = BlockedNumber.query
    
    if field_filter:
        query = query.filter_by(field=field_filter)
    
    if search:
        query = query.filter(BlockedNumber.number_norm.contains(search))
    
    blocked_numbers = query.order_by(BlockedNumber.created_at.desc())\
                          .paginate(page=page, per_page=20, error_out=False)
    
    # Get statistics
    stats = {
        'total': BlockedNumber.query.count(),
        'by_field': {}
    }
    
    field_counts = db.session.query(
        BlockedNumber.field,
        db.func.count(BlockedNumber.id)
    ).group_by(BlockedNumber.field).all()
    
    for field, count in field_counts:
        stats['by_field'][field] = count
    
    return render_template('admin/blocked_numbers.html', 
                         blocked_numbers=blocked_numbers,
                         field_filter=field_filter,
                         search=search,
                         stats=stats)

@admin_bp.route('/blocked_numbers/add', methods=['GET', 'POST'])
@login_required
@admin_required
def add_blocked_number():
    """Add new blocked number"""
    form = BlockedNumberForm()
    
    if form.validate_on_submit():
        try:
            blocked_number = BlockedNumber(
                field=form.field.data,
                number_norm=form.number_norm.data.zfill(3),
                reason=form.reason.data,
                is_active=form.is_active.data
            )
            
            db.session.add(blocked_number)
            db.session.commit()
            
            flash('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success')
            return redirect(url_for('admin.blocked_numbers'))
            
        except Exception as e:
            db.session.rollback()
            flash('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error')
    
    return render_template('admin/bulk_blocked_number_form.html', form=form, title='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô')

@admin_bp.route('/blocked_numbers/bulk_add', methods=['GET', 'POST'])
@login_required
@admin_required
def bulk_add_blocked_numbers():
    """Bulk add blocked numbers with automatic permutation generation"""
    form = BulkBlockedNumberForm()
    
    if request.method == 'POST' and form.validate_on_submit():
        # Get numbers data from JSON
        numbers_data = request.get_json() if request.is_json else request.form.get('numbers_data')
        
        if isinstance(numbers_data, str):
            import json
            try:
                numbers_data = json.loads(numbers_data)
            except:
                flash('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error')
                return redirect(url_for('admin.bulk_add_blocked_numbers'))
        
        if not numbers_data or not isinstance(numbers_data, list):
            flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô', 'error')
            return render_template('admin/bulk_blocked_number_form.html', form=form, title='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß')
        
        # Validate and process input data
        validation_result = validate_bulk_numbers_new_format(numbers_data)
        
        if not validation_result['valid']:
            for error in validation_result['errors'][:5]:  # Show first 5 errors
                flash(error, 'error')
            return render_template('admin/bulk_blocked_number_form.html', form=form, title='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß')
        
        success_count = 0
        error_count = 0
        errors = []
        
        try:
            # Clear all existing blocked numbers first
            deleted_count = BlockedNumber.query.delete()
            
            # Process each input number and generate all permutations
            all_records = []
            
            for item in validation_result['valid_numbers']:
                number = item['number']
                number_type = item['type']
                
                # Generate permutations based on number type
                if number_type == '2_digit':
                    # For 2-digit, generate permutations for both 2_top and 2_bottom
                    records_2top = generate_blocked_numbers_for_field(number, '2_top')
                    all_records.extend(records_2top)
                elif number_type == '3_digit':
                    # For 3-digit, generate permutations for 3_top and tote
                    records = generate_blocked_numbers_for_field(number, '3_top')
                    all_records.extend(records)
            
            # Remove duplicates and apply global settings
            unique_records = []
            seen = set()
            
            for record in all_records:
                key = (record['field'], record['number_norm'])
                if key not in seen:
                    seen.add(key)
                    # Apply global form settings
                    if form.reason.data:
                        record['reason'] = form.reason.data
                    record['is_active'] = form.is_active.data
                    unique_records.append(record)
            
            # Batch insert new records to database
            if unique_records:
                for record in unique_records:
                    try:
                        blocked_number = BlockedNumber(
                            field=record['field'],
                            number_norm=record['number_norm'],
                            reason=record.get('reason', ''),
                            is_active=record['is_active']
                        )
                        db.session.add(blocked_number)
                        success_count += 1
                    except Exception as e:
                        error_count += 1
                        errors.append(f"‡πÄ‡∏•‡∏Ç {record['number_norm']}: {str(e)}")
                
                # Commit all changes (delete + insert)
                db.session.commit()
        
        except Exception as e:
            db.session.rollback()
            flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {str(e)}', 'error')
            return render_template('admin/bulk_blocked_number_form.html', form=form, title='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß')
        
        # Show results
        if success_count > 0:
            flash(f'‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ {deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà {success_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', 'success')
            flash(f'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å {len(validation_result["valid_numbers"])} ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô {success_count} records ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'info')
        
        if error_count > 0:
            flash(f'‚ö†Ô∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {error_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', 'warning')
            for error in errors[:3]:  # Show first 3 errors
                flash(error, 'error')
        
        if success_count > 0:
            return redirect(url_for('admin.blocked_numbers'))
        
    return render_template('admin/bulk_blocked_number_form.html', form=form, title='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß')

@admin_bp.route('/blocked_numbers/<int:id>/edit', methods=['GET', 'POST'])
@login_required
@admin_required
def edit_blocked_number(id):
    """Edit blocked number"""
    blocked_number = BlockedNumber.query.get_or_404(id)
    form = BlockedNumberForm(obj=blocked_number)
    
    if form.validate_on_submit():
        try:
            blocked_number.field = form.field.data
            blocked_number.number_norm = form.number_norm.data.zfill(3)
            blocked_number.reason = form.reason.data
            blocked_number.is_active = form.is_active.data
            
            db.session.commit()
            flash('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success')
            return redirect(url_for('admin.blocked_numbers'))
            
        except Exception as e:
            db.session.rollback()
            flash('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error')
    
    return render_template('admin/bulk_blocked_number_form.html', 
                         form=form, 
                         blocked_number=blocked_number,
                         title='‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô')

@admin_bp.route('/blocked_numbers/<int:id>/delete', methods=['POST'])
@login_required
@admin_required
def delete_blocked_number(id):
    """Delete blocked number"""
    blocked_number = BlockedNumber.query.get_or_404(id)
    
    try:
        db.session.delete(blocked_number)
        db.session.commit()
        flash('‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success')
    except Exception as e:
        db.session.rollback()
        flash('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error')
    
    return redirect(url_for('admin.blocked_numbers'))


@admin_bp.route('/rules')
@login_required
@admin_required 
def rules():
    """Rules management"""
    return render_template('admin/rules.html')


@admin_bp.route('/audit_logs')
@login_required
@admin_required
def audit_logs():
    """Audit logs"""
    return render_template('admin/audit_logs.html')


@admin_bp.route('/settings')
@login_required
@admin_required
def settings():
    """System settings"""
    return render_template('admin/settings.html')


@admin_bp.route('/users')
@login_required
@admin_required
def users():
    """User management"""
    return render_template('admin/users.html')


@admin_bp.route('/reports')
@login_required
@admin_required
def reports():
    """Reports and analytics"""
    return render_template('admin/reports.html')
